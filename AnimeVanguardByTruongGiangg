local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Duckian",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Wait a minute, the script is loading",
    LoadingSubtitle = "by DucMagic$",
    Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = Duckian, -- Create a custom folder for your hub/game
       FileName = "Duckian Hub"
    },
 
    Discord = {
       Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "PnHj485p", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = false -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Go Ask Him",
       Subtitle = "Key System",
       Note = "Get Key", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"ducmagic"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

Rayfield:Notify({
   Title = "XIN THÔNG BÁO",
   Content = "PHIÊN BẢN FREE",
   Duration = 6,
   Image = "rewind",
})

local Tab = Window:CreateTab("Main", 4483362458) -- Title, Image

Tab:CreateButton({
    Name = "Click me!",
    Callback = function()
        print("Hello from Rayfield!")
    end
})

local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image


 local Dropdown = Tab:CreateDropdown({
    Name = "Select Area",
    Options = {"Summon","Play","Raid","Boss Rush","Challenge"},
    CurrentOption = {"Summon"},
    MultipleOptions = false,
    Flag = "DropDown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Options)
        local Dropdown = Tab:CreateDropdown({
            Name = "Select Area",
            Options = {"Summon", "Play", "Raid", "Boss Rush", "Challenge"},
            CurrentOption = {"Summon"},
            MultipleOptions = false,
            Flag = "DropDown1",
            Callback = function(Options)
                local selected = Options[1]
                local teleportTable = {
                    ["Summon"] = workspace:FindFirstChild("Summon"),
                    ["Play"] = workspace:FindFirstChild("Play"),
                    ["Raid"] = workspace:FindFirstChild("Raid"),
                    ["Boss Rush"] = workspace:FindFirstChild("BossRush"),
                    ["Challenge"] = workspace:FindFirstChild("Challenge")
                }
        
                local destination = teleportTable[selected]
                if destination and destination:IsA("BasePart") then
                    game.Players.LocalPlayer.Character:MoveTo(destination.Position)
                else
                    warn("Không tìm thấy vị trí cho: " .. selected)
                end
            end,
        })
        
    -- The function that takes place when the selected option is changed
    -- The variable (Options) is a table of strings for the current selected options
    end,
 })

local Tab = Window:CreateTab("Credit", 4483362458)

local Button = Tab:CreateButton({
   Name = "Click To See What Happen:)",
   Callback = function()
       local player = game.Players.LocalPlayer
       if player and player.Character then
           player.Character:BreakJoints() -- Reset nhân vật
       end
   end,
})

-- WalkSpeed Toggle + Slider
local WalkEnabled = false
local DefaultWalkSpeed = 16
local WalkSpeedValue = DefaultWalkSpeed

PlayerTab:CreateToggle({
    Name = "Chạy Nhanh",
    CurrentValue = false,
    Callback = function(Value)
        WalkEnabled = Value
        local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = Value and WalkSpeedValue or DefaultWalkSpeed
        end
    end,
})

PlayerTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 200},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = DefaultWalkSpeed,
    Callback = function(Value)
        WalkSpeedValue = Value
        if WalkEnabled then
            local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = Value
            end
        end
    end,
})

-- JumpPower Toggle + Slider
local JumpEnabled = false
local DefaultJumpPower = 50
local JumpPowerValue = DefaultJumpPower

PlayerTab:CreateToggle({
    Name = "Sức Mạnh Nhảy",
    CurrentValue = false,
    Callback = function(Value)
        JumpEnabled = Value
        local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.JumpPower = Value and JumpPowerValue or DefaultJumpPower
        end
    end,
})

PlayerTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 500},
    Increment = 1,
    Suffix = "Power",
    CurrentValue = DefaultJumpPower,
    Callback = function(Value)
        JumpPowerValue = Value
        if JumpEnabled then
            local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpPower = Value
            end
        end
    end,
})

local flingConnection = nil
local AntiFlingEnabled = false
local afConnection = nil

local function disableAntiFling()
	if AntiFlingEnabled and afConnection then
		afConnection:Disconnect()
		afConnection = nil
		AntiFlingEnabled = false
	end
end

-- Fling Toggle
PlayerTab:CreateToggle({
	Name = "Fling Mode",
	CurrentValue = false,
	Callback = function(Value)
		local player = game.Players.LocalPlayer
		local char = player.Character or player.CharacterAdded:Wait()
		local hrp = char:FindFirstChild("HumanoidRootPart")

		if Value then
			disableAntiFling() -- Tắt Anti-Fling nếu đang bật
			if hrp then
				hrp.CFrame = hrp.CFrame + Vector3.new(0, 5, 0)
				flingConnection = game:GetService("RunService").Stepped:Connect(function()
					hrp.Velocity = Vector3.new(100, 0, 100)
					hrp.RotVelocity = Vector3.new(0, 999999, 0)
				end)
			end
		else
			if flingConnection then
				flingConnection:Disconnect()
				flingConnection = nil
				if hrp then
					hrp.Velocity = Vector3.zero
					hrp.RotVelocity = Vector3.zero
				end
			end
		end
	end,
})

-- Anti-Fling Toggle
PlayerTab:CreateToggle({
	Name = "Anti-Fling",
	CurrentValue = false,
	Callback = function(Value)
		AntiFlingEnabled = Value

		if Value then
			afConnection = game:GetService("RunService").Stepped:Connect(function()
				local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
				if hrp then
					hrp.Velocity = Vector3.zero
					hrp.RotVelocity = Vector3.zero
				end
			end)
		else
			if afConnection then
				afConnection:Disconnect()
				afConnection = nil
			end
		end
	end,
})

-- Auto Aimbot
local AimbotEnabled = false
local AimbotFOV = 100
local currentTarget = nil
local marker = nil

-- Hàm tạo chấm xanh
local function createMarker(targetPart)
    if marker then marker:Destroy() end

    marker = Instance.new("BillboardGui")
    marker.Name = "AimbotMarker"
    marker.AlwaysOnTop = true
    marker.Size = UDim2.new(0, 12, 0, 12)
    marker.Adornee = targetPart
    marker.Parent = targetPart

    local dot = Instance.new("Frame")
    dot.Size = UDim2.new(1, 0, 1, 0)
    dot.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    dot.BorderSizePixel = 0
    dot.BackgroundTransparency = 0.1
    dot.Parent = marker
end

local function removeMarker()
    if marker then
        marker:Destroy()
        marker = nil
    end
end

-- Hàm tìm đối tượng gần nhất trong FOV
local function GetNearestTarget()
    local players = game:GetService("Players")
    local localPlayer = players.LocalPlayer
    local camera = workspace.CurrentCamera
    local nearest = nil
    local shortestDistance = AimbotFOV

    for _, player in ipairs(players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local pos, onScreen = camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
            if onScreen then
                local distance = (Vector2.new(pos.X, pos.Y) - Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    nearest = player
                end
            end
        end
    end

    return nearest
end

local aimbotConnection
local function enableAimbot()
    local cam = workspace.CurrentCamera
    if cam then
        cam.CameraType = Enum.CameraType.Scriptable
    end

    aimbotConnection = game:GetService("RunService").RenderStepped:Connect(function()
        local target = GetNearestTarget()
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            local camera = workspace.CurrentCamera
            camera.CFrame = CFrame.new(camera.CFrame.Position, target.Character.HumanoidRootPart.Position)

            if target ~= currentTarget then
                currentTarget = target
                createMarker(target.Character.HumanoidRootPart)
            end
        else
            if currentTarget then
                currentTarget = nil
                removeMarker()
            end
        end
    end)
end

local function disableAimbot()
    if aimbotConnection then
        aimbotConnection:Disconnect()
        aimbotConnection = nil
    end

    currentTarget = nil
    removeMarker()

    -- Reset camera để không còn khoá góc nhìn
    local cam = workspace.CurrentCamera
    if cam then
        cam.CameraType = Enum.CameraType.Custom
    end
end

PlayerTab:CreateToggle({
    Name = "Auto Aimbot",
    CurrentValue = false,
    Callback = function(Value)
        AimbotEnabled = Value
        if Value then
            enableAimbot()
        else
            disableAimbot()
        end
    end,
})

PlayerTab:CreateSlider({
    Name = "Aimbot FOV",
    Range = {20, 500},
    Increment = 10,
    Suffix = "px",
    CurrentValue = AimbotFOV,
    Callback = function(Value)
        AimbotFOV = Value
    end,
})

local flying = false
local flySpeed = 50
local flyConnection

local function enableFly()
    local player = game.Players.LocalPlayer
    local character = player.Character or player.CharacterAdded:Wait()
    local hrp = character:WaitForChild("HumanoidRootPart")

    flyConnection = game:GetService("RunService").RenderStepped:Connect(function()
        if flying then
            local camera = workspace.CurrentCamera
            local direction = Vector3.new(0, 0, 0)

            if UserInputService:IsKeyDown(Enum.KeyCode.W) then
                direction = direction + camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.S) then
                direction = direction - camera.CFrame.LookVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.A) then
                direction = direction - camera.CFrame.RightVector
            end
            if UserInputService:IsKeyDown(Enum.KeyCode.D) then
                direction = direction + camera.CFrame.RightVector
            end

            hrp.Velocity = Vector3.new(direction.X * flySpeed, flySpeed, direction.Z * flySpeed)
        end
    end)
end

local function disableFly()
    if flyConnection then
        flyConnection:Disconnect()
        flyConnection = nil
    end
end

PlayerTab:CreateToggle({
    Name = "Toggle Fly",
    CurrentValue = false,
    Callback = function(Value)
        flying = Value
        if flying then
            enableFly()
        else
            disableFly()
        end
    end,
})

PlayerTab:CreateSlider({
    Name = "Fly Speed",
    Range = {50, 200},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = flySpeed,
    Callback = function(Value)
        flySpeed = Value
    end,
})

local UserInputService = game:GetService("UserInputService")
