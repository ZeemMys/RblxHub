local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "Duckian",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Wait a minute, the script is loading",
    LoadingSubtitle = "by DucMagic$",
    Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = Duckian, -- Create a custom folder for your hub/game
       FileName = "Duckian Hub"
    },
 
    Discord = {
       Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "https://discord.gg/PnHj485p", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = true -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Go Ask Him",
       Subtitle = "Key System",
       Note = "Get Key Here -- https://raw.githubusercontent.com/ZeemMys/Test/main/key", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = true, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"NGUYENMINHDUC"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

local Tab = Window:CreateTab("Main", 4483362458) -- Title, Image

Tab:CreateButton({
    Name = "Click me!",
    Callback = function()
        print("Hello from Rayfield!")
    end
})

local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image


 local Dropdown = Tab:CreateDropdown({
    Name = "Select Area",
    Options = {"Summon","Play","Raid","Boss Rush","Challenge"},
    CurrentOption = {"Summon"},
    MultipleOptions = false,
    Flag = "DropDown1", -- A flag is the identifier for the configuration file, make sure every element has a different flag if you're using configuration saving to ensure no overlaps
    Callback = function(Options)
        local Dropdown = Tab:CreateDropdown({
            Name = "Select Area",
            Options = {"Summon", "Play", "Raid", "Boss Rush", "Challenge"},
            CurrentOption = {"Summon"},
            MultipleOptions = false,
            Flag = "DropDown1",
            Callback = function(Options)
                local selected = Options[1]
                local teleportTable = {
                    ["Summon"] = workspace:FindFirstChild("Summon"),
                    ["Play"] = workspace:FindFirstChild("Play"),
                    ["Raid"] = workspace:FindFirstChild("Raid"),
                    ["Boss Rush"] = workspace:FindFirstChild("BossRush"),
                    ["Challenge"] = workspace:FindFirstChild("Challenge")
                }
        
                local destination = teleportTable[selected]
                if destination and destination:IsA("BasePart") then
                    game.Players.LocalPlayer.Character:MoveTo(destination.Position)
                else
                    warn("Không tìm thấy vị trí cho: " .. selected)
                end
            end,
        })
        
    -- The function that takes place when the selected option is changed
    -- The variable (Options) is a table of strings for the current selected options
    end,
 })

local Tab = Window:CreateTab("Credit", 4483362458)

local Button = Tab:CreateButton({
   Name = "Click To See What Happen:)",
   Callback = function()
       local player = game.Players.LocalPlayer
       if player and player.Character then
           player.Character:BreakJoints() -- Reset nhân vật
       end
   end,
})

-- WalkSpeed Toggle + Slider
local WalkEnabled = false
local DefaultWalkSpeed = 16
local WalkSpeedValue = DefaultWalkSpeed

PlayerTab:CreateToggle({
    Name = "Toggle WalkSpeed",
    CurrentValue = false,
    Callback = function(Value)
        WalkEnabled = Value
        local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = Value and WalkSpeedValue or DefaultWalkSpeed
        end
    end,
})

PlayerTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 200},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = DefaultWalkSpeed,
    Callback = function(Value)
        WalkSpeedValue = Value
        if WalkEnabled then
            local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = Value
            end
        end
    end,
})

-- JumpPower Toggle + Slider
local JumpEnabled = false
local DefaultJumpPower = 50
local JumpPowerValue = DefaultJumpPower

PlayerTab:CreateToggle({
    Name = "Toggle JumpPower",
    CurrentValue = false,
    Callback = function(Value)
        JumpEnabled = Value
        local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.JumpPower = Value and JumpPowerValue or DefaultJumpPower
        end
    end,
})

PlayerTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 500},
    Increment = 1,
    Suffix = "Power",
    CurrentValue = DefaultJumpPower,
    Callback = function(Value)
        JumpPowerValue = Value
        if JumpEnabled then
            local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpPower = Value
            end
        end
    end,
})

local flingConnection = nil
local AntiFlingEnabled = false
local afConnection = nil

local function disableAntiFling()
	if AntiFlingEnabled and afConnection then
		afConnection:Disconnect()
		afConnection = nil
		AntiFlingEnabled = false
	end
end

-- Fling Toggle
PlayerTab:CreateToggle({
	Name = "Fling Mode",
	CurrentValue = false,
	Callback = function(Value)
		local player = game.Players.LocalPlayer
		local char = player.Character or player.CharacterAdded:Wait()
		local hrp = char:FindFirstChild("HumanoidRootPart")

		if Value then
			disableAntiFling() -- Tắt Anti-Fling nếu đang bật
			if hrp then
				hrp.CFrame = hrp.CFrame + Vector3.new(0, 5, 0)
				flingConnection = game:GetService("RunService").Stepped:Connect(function()
					hrp.Velocity = Vector3.new(100, 0, 100)
					hrp.RotVelocity = Vector3.new(0, 999999, 0)
				end)
			end
		else
			if flingConnection then
				flingConnection:Disconnect()
				flingConnection = nil
				if hrp then
					hrp.Velocity = Vector3.zero
					hrp.RotVelocity = Vector3.zero
				end
			end
		end
	end,
})

-- Anti-Fling Toggle
PlayerTab:CreateToggle({
	Name = "Anti-Fling",
	CurrentValue = false,
	Callback = function(Value)
		AntiFlingEnabled = Value

		if Value then
			afConnection = game:GetService("RunService").Stepped:Connect(function()
				local hrp = game.Players.LocalPlayer.Character and game.Players.LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
				if hrp then
					hrp.Velocity = Vector3.zero
					hrp.RotVelocity = Vector3.zero
				end
			end)
		else
			if afConnection then
				afConnection:Disconnect()
				afConnection = nil
			end
		end
	end,
})
