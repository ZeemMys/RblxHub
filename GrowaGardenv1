local Rayfield = loadstring(game:HttpGet('https://sirius.menu/rayfield'))()

local Window = Rayfield:CreateWindow({
    Name = "DucWare ‚Äî Grow A Garden",
    Icon = 0, -- Icon in Topbar. Can use Lucide Icons (string) or Roblox Image (number). 0 to use no icon (default).
    LoadingTitle = "Wait a minute, the script is loading",
    LoadingSubtitle = "by DucMagic$",
    Theme = "Amethyst", -- Check https://docs.sirius.menu/rayfield/configuration/themes
 
    DisableRayfieldPrompts = false,
    DisableBuildWarnings = false, -- Prevents Rayfield from warning when the script has a version mismatch with the interface
 
    ConfigurationSaving = {
       Enabled = true,
       FolderName = Duckian, -- Create a custom folder for your hub/game
       FileName = "Duckian Hub"
    },
 
    Discord = {
       Enabled = true, -- Prompt the user to join your Discord server if their executor supports it
       Invite = "PnHj485p", -- The Discord invite code, do not include discord.gg/. E.g. discord.gg/ ABCD would be ABCD
       RememberJoins = false -- Set this to false to make them join the discord every time they load it up
    },
 
    KeySystem = true, -- Set this to true to use our key system
    KeySettings = {
       Title = "Go Ask Him",
       Subtitle = "Key System",
       Note = "Get Key", -- Use this to tell the user how to get a key
       FileName = "Key", -- It is recommended to use something unique as other scripts using Rayfield may overwrite your key file
       SaveKey = true, -- The user's key will be saved, but if you change the key, they will be unable to use your script
       GrabKeyFromSite = false, -- If this is true, set Key below to the RAW site you would like Rayfield to get the key from
       Key = {"ducmagic"} -- List of keys that will be accepted by the system, can be RAW file links (pastebin, github etc) or simple strings ("hello","key22")
    }
 })

Rayfield:Notify({
   Title = "XIN TH√îNG B√ÅO",
   Content = "PHI√äN B·∫¢N FREE",
   Duration = 5,
   Image = "0",
})

local MainTab = Window:CreateTab("Main", 4483362458) -- Title, Image
local PlayerTab = Window:CreateTab("Player", 4483362458) -- Title, Image
local FunnyTab = Window:CreateTab("Fun And Code", 4483362458)

------MAIN--------
local Paragraph = MainTab:CreateParagraph({Title = "Thanks For Using", Content = "Contact 0856469268"})

MainTab:CreateToggle({
    Name = "Auto Harvest",
    CurrentValue = false,
    Callback = function(Value)
        _G.AutoHarvestUniversal = Value

        if not Value then
            print("‚õî ƒê√£ t·∫Øt Auto Harvest")
            return
        end

        task.spawn(function()
            local TweenService = game:GetService("TweenService")
            local Players = game:GetService("Players")
            local player = Players.LocalPlayer
            local hrp = player.Character:WaitForChild("HumanoidRootPart")

            local function tweenTo(part)
                if not part or not part:IsA("BasePart") then return end
                local goal = {CFrame = part.CFrame + Vector3.new(0, 2, 0)}
                local tween = TweenService:Create(hrp, TweenInfo.new(0.8), goal)
                tween:Play()
                tween.Completed:Wait()
                task.wait(0.5)
            end

            local function getMyFarm()
                local allPlayers = Players:GetPlayers()
                table.sort(allPlayers, function(a, b) return a.Name < b.Name end)
                local myIndex = table.find(allPlayers, player)
                if not myIndex then return nil end

                local farmFolder = workspace:FindFirstChild("Farm")
                if not farmFolder then return nil end

                local farms = farmFolder:GetChildren()
                table.sort(farms, function(a, b) return a.Name < b.Name end)

                return farms[myIndex]
            end

            while task.wait(1.2) do
                if not _G.AutoHarvestUniversal then break end
                pcall(function()
                    local myFarm = getMyFarm()
                    if not myFarm then return end

                    local important = myFarm:FindFirstChild("Important")
                    local plants = important and important:FindFirstChild("Plants_Physical")
                    if not plants then return end

                    for _, plant in ipairs(plants:GetChildren()) do
                        if not _G.AutoHarvestUniversal then return end

                        -- H√°i c√¢y (nh∆∞ cherry, raspberry)
                        local fruitFolder = plant:FindFirstChild("Fruits")
                        if fruitFolder then
                            local growFolder = fruitFolder:FindFirstChild("Grow") or fruitFolder
                            for _, fruit in ipairs(growFolder:GetChildren()) do
                                if not _G.AutoHarvestUniversal then return end

                                -- Teleport to the plant's main part (Folder name is the tree name)
                                if fruit:IsA("BasePart") or fruit:IsA("MeshPart") then
                                    local fruitPrompt = fruit:FindFirstChildWhichIsA("ProximityPrompt")
                                    if fruitPrompt then
                                        -- Teleport to the plant's base
                                        tweenTo(plant)  -- Here we teleport directly to the plant instead of just the fruit
                                        fireproximityprompt(fruitPrompt)
                                        task.wait(0.4)
                                    end
                                end
                            end
                        end

                        -- Nh·ªï c√¢y (nh∆∞ carrot, tre)
                        local prompt = plant:FindFirstChildWhichIsA("ProximityPrompt", true)
                        if prompt then
                            local mainPart = plant:IsA("Part") and plant or plant:FindFirstChildWhichIsA("BasePart")
                            if mainPart then
                                tweenTo(mainPart)
                                fireproximityprompt(prompt)
                                task.wait(0.6)
                            end
                        end
                    end
                end)
            end
        end)
    end,
})

MainTab:CreateToggle({
    Name = "Auto Sell",
    CurrentValue = false,
    Callback = function(Value)
        _G.AutoInstantSell = Value

        if Value then
            task.spawn(function()
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local hrp = character:WaitForChild("HumanoidRootPart")
                local sellRemote = game:GetService("ReplicatedStorage").GameEvents:FindFirstChild("Sell_Inventory")
                local sellPoint = workspace:WaitForChild("Tutorial_Points"):WaitForChild("Tutorial_Point_2")

                while _G.AutoInstantSell do
                    pcall(function()
                        -- Teleport tr·ª±c ti·∫øp
                        hrp.CFrame = sellPoint.CFrame + Vector3.new(0, 3, 0)

                        task.wait(0.4)

                        -- G·ª≠i l·ªánh b√°n
                        if sellRemote then
                            sellRemote:FireServer()
                            print("‚úÖ ƒê√£ b√°n h√†ng (b·∫±ng teleport).")
                        else
                            warn("‚ùå Kh√¥ng t√¨m th·∫•y remote Sell_Inventory")
                        end
                    end)

                    task.wait(10) -- Th·ªùi gian gi·ªØa m·ªói l·∫ßn b√°n
                end
            end)
        else
            print("‚õî Auto Sell ƒë√£ b·ªã t·∫Øt.")
        end
    end
})

local seedTypes = {
    "Common",
    "Uncommon",
    "Rare",
    "Legendary",
    "Mythical",
    "Divine"
}

local selectedSeedType = "Common"
local autoBuyEnabled = false
local autoBuyThread = nil  -- Th√™m bi·∫øn ƒë·ªÉ theo d√µi thread c·ªßa auto-buy

MainTab:CreateDropdown({
    Name = "Ch·ªçn lo·∫°i h·∫°t gi·ªëng c·∫ßn mua",
    Options = seedTypes,
    CurrentOption = selectedSeedType,
    Callback = function(Value)
        selectedSeedType = Value
        print("‚úÖ ƒê√£ ch·ªçn lo·∫°i h·∫°t gi·ªëng:", Value)
    end,
})

MainTab:CreateToggle({
    Name = "Buy Seed |Ch·ªçn ƒëi em|",
    CurrentValue = false,
    Callback = function(Value)
        autoBuyEnabled = Value

        -- N·∫øu b·∫≠t AutoBuy, t·∫°o thread m·ªõi ƒë·ªÉ mua h·∫°t gi·ªëng
        if autoBuyEnabled then
            if autoBuyThread then
                -- N·∫øu ƒë√£ c√≥ thread auto-buy ƒëang ch·∫°y, kh√¥ng t·∫°o l·∫°i
                print("‚ö†Ô∏è AutoBuy ƒë√£ ƒë∆∞·ª£c b·∫≠t, kh√¥ng t·∫°o thread m·ªõi.")
                return
            end

            local buyRemote = game:GetService("ReplicatedStorage").GameEvents:FindFirstChild("BuySeedStock")
            if not buyRemote then
                warn("‚ùå Kh√¥ng t√¨m th·∫•y remote BuySeedStock")
                return
            end

            -- T·∫°o thread auto-buy khi b·∫≠t toggle
            autoBuyThread = task.spawn(function()
                while autoBuyEnabled do
                    pcall(function()
                        if selectedSeedType then
                            print("üõí Mua h·∫°t:", selectedSeedType)
                            buyRemote:FireServer(selectedSeedType)
                        end
                    end)
                    task.wait(5)  -- Delay gi·ªØa c√°c l·∫ßn mua
                end
            end)
            print("‚úÖ Auto Buy Seed ƒë√£ ƒë∆∞·ª£c b·∫≠t.")
        else
            -- N·∫øu t·∫Øt AutoBuy, d·ª´ng thread ƒëang ch·∫°y
            if autoBuyThread then
                -- H·ªßy b·ªè thread mua t·ª± ƒë·ªông
                autoBuyEnabled = false  -- T·∫Øt t√≠nh nƒÉng
                autoBuyThread = nil  -- X√≥a thread
                print("‚õî Auto Buy Seed ƒë√£ t·∫Øt.")
            end
        end
    end
})
---------Funny------------
local Button = FunnyTab:CreateButton({
   Name = "Click To See What Happen:)",
   Callback = function()
       local player = game.Players.LocalPlayer
       if player and player.Character then
           player.Character:BreakJoints() -- Reset nh√¢n v·∫≠t
       end
   end
})

FunnyTab:CreateToggle({
    Name = "Xo√° Part (CH·ªú B·ªê M√ÄY X√çU)",
    CurrentValue = false,
    Callback = function(Value)
        if Value then
            print("Toggle 'Xo√° Part' ƒë∆∞·ª£c b·∫≠t")

            local seedStands = nil
            local sellStands = nil
            local gearStands = nil
            local petStands = nil
            local questModel = nil

            -- T√¨m c√°c stand m√¥ h√¨nh
            for _, obj in ipairs(workspace:GetDescendants()) do
                if obj:IsA("Model") then
                    if obj.Name == "Seed Stands" then
                        seedStands = obj
                    elseif obj.Name == "Sell Stands" then
                        sellStands = obj
                    elseif obj.Name == "Gear Stands" then
                        gearStands = obj
                    elseif obj.Name == "Pet Stand" then
                        petStands = obj
                    elseif obj.Name == "Quest Stand" then
                        questModel = obj
                    end
                end
            end

            -- C√°c t√™n Part c·∫ßn x√≥a
            local namesToDelete = {
                "Part",
                "Crooked Plank",
                "Crooked Plank2",
                "Shop Stand",
                "Gear Part",
                "Pet Part",
                "Quest Part"
            }

            -- H√†m x√≥a c√°c part trong m√¥ h√¨nh
            local function deletePartsFromModel(model)
                for _, obj in ipairs(model:GetDescendants()) do
                    if obj:IsA("BasePart") and table.find(namesToDelete, obj.Name) then
                        obj.Anchored = false
                        print("ƒêang x√≥a part: " .. obj.Name)
                        obj:Destroy()
                    end
                end
            end

            -- X√≥a c√°c ph·∫ßn trong t·ª´ng Stand
            if seedStands then deletePartsFromModel(seedStands) end
            if sellStands then deletePartsFromModel(sellStands) end
            if gearStands then deletePartsFromModel(gearStands) end
            if petStands then deletePartsFromModel(petStands) end
            if questModel then deletePartsFromModel(questModel) end

            -- GI·ªÆ L·∫†I: X·ª≠ l√Ω c√°c Farm Folder b√™n trong workspace.Farm
            local farmFolder = workspace:FindFirstChild("Farm")
            if farmFolder and farmFolder:IsA("Folder") then
                for _, singleFarm in ipairs(farmFolder:GetChildren()) do
                    if singleFarm:IsA("Folder") then
                        print("ƒêang ki·ªÉm tra folder: " .. singleFarm.Name)

                        -- Ki·ªÉm tra n·∫øu c√≥ m√¥ h√¨nh Decoration v√† x√≥a Farm Fence n·∫øu c√≥
                        local decorationModel = singleFarm:FindFirstChild("Decoration")
                        if decorationModel then
                            print("T√¨m th·∫•y Decoration trong folder: " .. singleFarm.Name)
                            local foundFarmFence = false
                            for _, desc in ipairs(decorationModel:GetDescendants()) do
                                if desc:IsA("Model") and desc.Name == "Farm Fence" then
                                    print("ƒêang x√≥a Farm Fence trong folder: " .. singleFarm.Name)
                                    desc:Destroy()
                                    foundFarmFence = true
                                end
                            end
                            if not foundFarmFence then
                                print("Kh√¥ng t√¨m th·∫•y Farm Fence trong Decoration c·ªßa folder: " .. singleFarm.Name)
                            end
                        else
                            print("Kh√¥ng t√¨m th·∫•y Decoration trong folder: " .. singleFarm.Name)
                        end

                        -- X√≥a Grown_Sign trong m·ªói folder con c·ªßa Farm
                        local foundGrownSign = false
                        for _, item in ipairs(singleFarm:GetDescendants()) do
                            if (item:IsA("BasePart") or item:IsA("Model")) then
                                if item.Name == "Grown_Sign" then
                                    print("ƒêang x√≥a Grown_Sign trong folder: ", singleFarm.Name)
                                    item:Destroy()
                                    foundGrownSign = true
                                end
                            end
                        end
                        if not foundGrownSign then
                            print("Kh√¥ng t√¨m th·∫•y Grown_Sign trong folder: " .. singleFarm.Name)
                        end
                    end
                end
            else
                warn("Kh√¥ng t√¨m th·∫•y folder Farm trong workspace ho·∫∑c kh√¥ng ph·∫£i l√† Folder")
            end
        end
    end
})

local ReplicatedStorage = game:GetService("ReplicatedStorage")
local codeRemote = ReplicatedStorage:WaitForChild("GameEvents"):WaitForChild("ClaimableCodeService")

-- Danh s√°ch c√°c m√£ c·∫ßn n·∫°p
local listOfCodes = {
    "lunarglowup",
    "glowpetup",-- thay m√£ h·ª£p l·ªá v√†o ƒë√¢y
}

FunnyTab:CreateButton({
    Name = "Redeem All Codes",
    Callback = function()
        for _, code in ipairs(listOfCodes) do
            codeRemote:FireServer(code)  -- G·ª≠i m√£ ƒë·∫øn server
            task.wait(0.3)  -- Ch·ªù gi·ªØa m·ªói l·∫ßn g·ª≠i ƒë·ªÉ tr√°nh lag
        end
    end
})
------PLAYER---------
-- WalkSpeed Toggle + Slider
local WalkEnabled = false
local DefaultWalkSpeed = 16
local WalkSpeedValue = DefaultWalkSpeed

PlayerTab:CreateToggle({
    Name = "Ch·∫°y Nhanh",
    CurrentValue = false,
    Callback = function(Value)
        WalkEnabled = Value
        local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.WalkSpeed = Value and WalkSpeedValue or DefaultWalkSpeed
        end
    end,
})

PlayerTab:CreateSlider({
    Name = "WalkSpeed",
    Range = {16, 200},
    Increment = 1,
    Suffix = "Speed",
    CurrentValue = DefaultWalkSpeed,
    Callback = function(Value)
        WalkSpeedValue = Value
        if WalkEnabled then
            local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.WalkSpeed = Value
            end
        end
    end,
})

-- JumpPower Toggle + Slider
local JumpEnabled = false
local DefaultJumpPower = 50
local JumpPowerValue = DefaultJumpPower

PlayerTab:CreateToggle({
    Name = "S·ª©c M·∫°nh Nh·∫£y",
    CurrentValue = false,
    Callback = function(Value)
        JumpEnabled = Value
        local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
        if humanoid then
            humanoid.JumpPower = Value and JumpPowerValue or DefaultJumpPower
        end
    end,
})

PlayerTab:CreateSlider({
    Name = "JumpPower",
    Range = {50, 500},
    Increment = 1,
    Suffix = "Power",
    CurrentValue = DefaultJumpPower,
    Callback = function(Value)
        JumpPowerValue = Value
        if JumpEnabled then
            local humanoid = game.Players.LocalPlayer.Character:FindFirstChildOfClass("Humanoid")
            if humanoid then
                humanoid.JumpPower = Value
            end
        end
    end,
})

-- Auto Aimbot
local AimbotEnabled = false
local AimbotFOV = 100
local currentTarget = nil
local marker = nil

-- H√†m t·∫°o ch·∫•m xanh
local function createMarker(targetPart)
    if marker then marker:Destroy() end

    marker = Instance.new("BillboardGui")
    marker.Name = "AimbotMarker"
    marker.AlwaysOnTop = true
    marker.Size = UDim2.new(0, 12, 0, 12)
    marker.Adornee = targetPart
    marker.Parent = targetPart

    local dot = Instance.new("Frame")
    dot.Size = UDim2.new(1, 0, 1, 0)
    dot.BackgroundColor3 = Color3.fromRGB(0, 255, 0)
    dot.BorderSizePixel = 0
    dot.BackgroundTransparency = 0.1
    dot.Parent = marker
end

local function removeMarker()
    if marker then
        marker:Destroy()
        marker = nil
    end
end

-- H√†m t√¨m ƒë·ªëi t∆∞·ª£ng g·∫ßn nh·∫•t trong FOV
local function GetNearestTarget()
    local players = game:GetService("Players")
    local localPlayer = players.LocalPlayer
    local camera = workspace.CurrentCamera
    local nearest = nil
    local shortestDistance = AimbotFOV

    for _, player in ipairs(players:GetPlayers()) do
        if player ~= localPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            local pos, onScreen = camera:WorldToViewportPoint(player.Character.HumanoidRootPart.Position)
            if onScreen then
                local distance = (Vector2.new(pos.X, pos.Y) - Vector2.new(camera.ViewportSize.X/2, camera.ViewportSize.Y/2)).Magnitude
                if distance < shortestDistance then
                    shortestDistance = distance
                    nearest = player
                end
            end
        end
    end

    return nearest
end

local aimbotConnection
local function enableAimbot()
    aimbotConnection = game:GetService("RunService").RenderStepped:Connect(function()
        if not AimbotEnabled then return end

        local target = GetNearestTarget()
        if target and target.Character and target.Character:FindFirstChild("HumanoidRootPart") then
            local camera = workspace.CurrentCamera
            -- T·∫°o m·ªôt v·ªã tr√≠ m·ªõi camera s·∫Ω lu√¥n h∆∞·ªõng v·ªÅ m·ª•c ti√™u
            local targetPosition = target.Character.HumanoidRootPart.Position
            local cameraPosition = camera.CFrame.Position
            local direction = (targetPosition - cameraPosition).unit
            -- ƒêi·ªÅu ch·ªânh camera ƒë·ªÉ lu√¥n nh√¨n v√†o m·ª•c ti√™u m√† kh√¥ng thay ƒë·ªïi g√≥c nh√¨n c·ªßa ng∆∞·ªùi ch∆°i
            camera.CFrame = CFrame.new(cameraPosition, cameraPosition + direction)
            
            if target ~= currentTarget then
                currentTarget = target
                createMarker(target.Character.HumanoidRootPart)
            end
        else
            -- Kh√¥ng c√≥ m·ª•c ti√™u
            if currentTarget then
                currentTarget = nil
                removeMarker()
            end
        end
    end)
end

local function disableAimbot()
    if aimbotConnection then
        aimbotConnection:Disconnect()
        aimbotConnection = nil
    end

    -- Reset camera v√† lo·∫°i b·ªè marker
    currentTarget = nil
    removeMarker()

    local cam = workspace.CurrentCamera
    if cam then
        cam.CameraType = Enum.CameraType.Custom
    end
end

PlayerTab:CreateToggle({
    Name = "Auto Aimbot",
    CurrentValue = false,
    Callback = function(Value)
        AimbotEnabled = Value
        if Value then
            enableAimbot()
        else
            disableAimbot()
        end
    end,
})

PlayerTab:CreateSlider({
    Name = "Aimbot FOV",
    Range = {20, 500},
    Increment = 10,
    Suffix = "px",
    CurrentValue = AimbotFOV,
    Callback = function(Value)
        AimbotFOV = Value
    end,
})

local UIS = game:GetService("UserInputService")
local RS = game:GetService("RunService")
local flyConnection
local velocity
local flySpeed = 50
local flying = false

local function startFlying()
    local char = game.Players.LocalPlayer.Character
    local hrp = char and char:FindFirstChild("HumanoidRootPart")
    if not hrp then return end

    velocity = Instance.new("BodyVelocity")
    velocity.MaxForce = Vector3.new(1e5, 1e5, 1e5)
    velocity.Velocity = Vector3.zero
    velocity.Parent = hrp

    flying = true

    flyConnection = RS.RenderStepped:Connect(function()
        local cam = workspace.CurrentCamera
        local moveDirection = Vector3.zero

        if UIS:IsKeyDown(Enum.KeyCode.W) then
            moveDirection += cam.CFrame.LookVector
        end
        if UIS:IsKeyDown(Enum.KeyCode.S) then
            moveDirection -= cam.CFrame.LookVector
        end
        if UIS:IsKeyDown(Enum.KeyCode.A) then
            moveDirection -= cam.CFrame.RightVector
        end
        if UIS:IsKeyDown(Enum.KeyCode.D) then
            moveDirection += cam.CFrame.RightVector
        end
        if UIS:IsKeyDown(Enum.KeyCode.Space) then
            moveDirection += Vector3.new(0, 1, 0)
        end
        if UIS:IsKeyDown(Enum.KeyCode.LeftControl) then
            moveDirection -= Vector3.new(0, 1, 0)
        end

        if moveDirection.Magnitude > 0 then
            velocity.Velocity = moveDirection.Unit * flySpeed
        else
            velocity.Velocity = Vector3.zero
        end
    end)
end

local function stopFlying()
    flying = false
    if flyConnection then flyConnection:Disconnect() end
    if velocity then velocity:Destroy() end
end

-- Toggle Fly
PlayerTab:CreateToggle({
    Name = "Fly",
    CurrentValue = false,
    Callback = function(Value)
        FlyEnabled = Value
        if Value then
            startFlying()
        else
            stopFlying()
        end
    end,
})

-- Fly Speed Slider
PlayerTab:CreateSlider({
    Name = "Fly Speed",
    Range = {10, 300},
    Increment = 5,
    Suffix = "stud/s",
    CurrentValue = flySpeed,
    Callback = function(Value)
        flySpeed = Value
        if flying then
            bodyVelocity.Velocity = Vector3.new(0, FlySpeed, 0)
        end
    end,
})

local ESPEnabled = false
local ESPObjects = {}

function createESP(player)
    if player == game.Players.LocalPlayer then return end
    local character = player.Character
    if not character then return end

    local box = Instance.new("BoxHandleAdornment")
    box.Name = "ESPBox"
    box.Size = Vector3.new(2, 5, 1)
    box.Color3 = Color3.fromRGB(0, 255, 0)
    box.Transparency = 0.5
    box.Adornee = character:FindFirstChild("HumanoidRootPart")
    box.AlwaysOnTop = true
    box.ZIndex = 5
    box.Parent = character

    local nameTag = Instance.new("BillboardGui")
    nameTag.Name = "ESPName"
    nameTag.Size = UDim2.new(0, 100, 0, 40)
    nameTag.StudsOffset = Vector3.new(0, 3, 0)
    nameTag.Adornee = character:FindFirstChild("Head")
    nameTag.AlwaysOnTop = true
    nameTag.Parent = character

    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 1, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.Text = player.Name
    nameLabel.TextColor3 = Color3.new(1, 1, 1)
    nameLabel.TextScaled = true
    nameLabel.Font = Enum.Font.SourceSansBold
    nameLabel.Parent = nameTag

    ESPObjects[player] = {box, nameTag}
end

function removeESP(player)
    if ESPObjects[player] then
        for _, v in pairs(ESPObjects[player]) do
            if v then v:Destroy() end
        end
        ESPObjects[player] = nil
    end
end

function updateESP()
    for _, player in pairs(game.Players:GetPlayers()) do
        if ESPEnabled then
            if player.Character and not ESPObjects[player] then
                createESP(player)
            end
        else
            removeESP(player)
        end
    end
end

-- Toggle ESP
PlayerTab:CreateToggle({
    Name = "B·∫≠t/T·∫Øt ESP",
    CurrentValue = false,
    Callback = function(Value)
        ESPEnabled = Value
        updateESP()
    end,
})

-- Theo d√µi ng∆∞·ªùi ch∆°i m·ªõi
game.Players.PlayerAdded:Connect(function(player)
    player.CharacterAdded:Connect(function()
        wait(1)
        if ESPEnabled then
            createESP(player)
        end
    end)
end)

-- Xo√° ESP khi ng∆∞·ªùi ch∆°i r·ªùi
game.Players.PlayerRemoving:Connect(function(player)
    removeESP(player)
end)
